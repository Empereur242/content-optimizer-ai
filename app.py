# Application: Assistant IA pour la Cr√©ation de Contenu Optimis√©
# Technologie: Python + API Gratuite + Streamlit (h√©bergement gratuit)

import streamlit as st
import requests
import json
import time
import re
from datetime import datetime

# Configuration de l'application
st.set_page_config(page_title="ContentOptimizer AI", page_icon="üí°", layout="wide")

# Styles CSS personnalis√©s
st.markdown("""
<style>
    .main-header {text-align: center; color: #1E88E5; font-size: 2.5rem; font-weight: bold; margin-bottom: 30px;}
    .sub-header {color: #424242; font-size: 1.5rem; margin-bottom: 20px;}
    .category-header {color: #0D47A1; font-size: 1.2rem; font-weight: bold; margin-top: 25px;}
    .result-container {background-color: #f0f8ff; padding: 20px; border-radius: 10px; margin-top: 20px;}
    .pro-tip {background-color: #e8f5e9; padding: 15px; border-radius: 5px; margin: 15px 0;}
    .feature-box {padding: 10px; background-color: #e3f2fd; border-radius: 5px; margin-bottom: 10px;}
</style>
""", unsafe_allow_html=True)

# En-t√™te de l'application
st.markdown('<h1 class="main-header">ContentOptimizer AI</h1>', unsafe_allow_html=True)
st.markdown('<h2 class="sub-header">Optimisez votre contenu pour les moteurs de recherche et maximisez votre impact en ligne</h2>', unsafe_allow_html=True)

# Sidebar pour la navigation
st.sidebar.image("https://via.placeholder.com/150x150.png?text=Logo", use_column_width=True)
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choisissez un outil:", ["G√©n√©rateur de contenu SEO", "Analyse de mots-cl√©s", "Optimisation de titres", "V√©rificateur de lisibilit√©"])

# Plan d'abonnement
st.sidebar.markdown("---")
st.sidebar.title("Plans d'abonnement")
selected_plan = st.sidebar.selectbox("Votre plan actuel:", ["Gratuit (3 analyses/jour)", "Pro (19.99‚Ç¨/mois)", "Expert (49.99‚Ç¨/mois)"])

# Compteur d'utilisation (simulation)
st.sidebar.markdown("---")
st.sidebar.subheader("Utilisation aujourd'hui")
if selected_plan == "Gratuit (3 analyses/jour)":
    st.sidebar.progress(0.33)
    st.sidebar.text("1/3 analyses utilis√©es")
else:
    st.sidebar.progress(0.12)
    st.sidebar.text("6/50 analyses utilis√©es")

# Fonction pour simuler l'appel √† une API (utilise une API gratuite ou simule une r√©ponse)
def analyze_content(content, keywords=None, analysis_type="seo"):
    # Simulation d'un d√©lai d'API
    with st.spinner("Analyse en cours..."):
        time.sleep(2)
    
    # √Ä remplacer par un vrai appel API (comme TextGears API gratuite ou une autre API gratuite)
    # Ici nous simulons simplement une r√©ponse pour la d√©mo
    if analysis_type == "seo":
        # Calcul de quelques m√©triques de base
        word_count = len(content.split())
        keyword_density = 0
        if keywords:
            keyword_count = sum(1 for word in content.lower().split() if word in keywords.lower().split())
            keyword_density = keyword_count / word_count if word_count > 0 else 0
            
        # Score de lisibilit√© simple
        avg_sentence_length = len(content) / max(1, len(re.split(r'[.!?]', content)) - 1)
        readability_score = min(100, max(0, 100 - (avg_sentence_length - 15) * 2))
        
        return {
            "word_count": word_count,
            "keyword_density": keyword_density * 100,
            "readability_score": readability_score,
            "recommendations": [
                "Ajoutez plus de mots-cl√©s secondaires pour am√©liorer votre r√©f√©rencement",
                "Incluez plus de sous-titres avec des balises H2 et H3",
                "Enrichissez votre contenu avec des exemples concrets",
                "Consid√©rez l'ajout d'images ou de graphiques pertinents"
            ],
            "seo_score": min(100, 55 + (word_count / 100) + (keyword_density * 100))
        }

# Fonction pour g√©n√©rer des suggestions de titres optimis√©s
def generate_titles(topic, keywords):
    # Simulation d'un d√©lai d'API
    with st.spinner("G√©n√©ration des titres optimis√©s..."):
        time.sleep(1.5)
    
    # G√©n√©ration de titres bas√©s sur des formats populaires
    base_titles = [
        f"Comment {topic} peut transformer votre {keywords}",
        f"{keywords.title()}: {topic.capitalize()} en 5 √©tapes simples",
        f"Les 7 secrets de {topic} que personne ne vous dit sur {keywords}",
        f"Pourquoi {topic} est essentiel pour votre succ√®s en {keywords}",
        f"Guide complet: Ma√Ætrisez {topic} pour dominer {keywords} en 2025",
    ]
    return base_titles

# Pages de l'application
if page == "G√©n√©rateur de contenu SEO":
    st.markdown('<h3 class="category-header">G√©n√©rateur de contenu optimis√© pour le SEO</h3>', unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        sujet = st.text_input("Sujet principal:", placeholder="Ex: marketing digital pour petites entreprises")
        keywords = st.text_input("Mots-cl√©s principaux (s√©par√©s par des virgules):", placeholder="Ex: marketing digital, PME, strat√©gie en ligne")
        tone = st.selectbox("Tonalit√©:", ["Informatif", "Persuasif", "Didactique", "Conversationnel", "Professionnel"])
        word_count = st.slider("Nombre de mots cible:", 300, 2000, 800, 100)
    
    with col2:
        st.markdown('<div class="feature-box">', unsafe_allow_html=True)
        st.subheader("Options avanc√©es")
        include_stats = st.checkbox("Inclure des statistiques", value=True)
        include_examples = st.checkbox("Inclure des exemples concrets", value=True)
        include_cta = st.checkbox("Ajouter un appel √† l'action", value=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        st.markdown('<div class="pro-tip">', unsafe_allow_html=True)
        st.markdown("**üí° Astuce Pro**: Les contenus de 1200-1500 mots sont g√©n√©ralement mieux class√©s dans les r√©sultats de recherche Google.")
        st.markdown('</div>', unsafe_allow_html=True)
    
    if st.button("G√©n√©rer du contenu optimis√©"):
        if not sujet or not keywords:
            st.error("Veuillez remplir tous les champs obligatoires.")
        else:
            # Simuler la g√©n√©ration de contenu
            with st.spinner("G√©n√©ration du contenu optimis√© en cours..."):
                time.sleep(3)
                
            st.success("Contenu g√©n√©r√© avec succ√®s!")
            
            # Afficher le r√©sultat
            st.markdown('<div class="result-container">', unsafe_allow_html=True)
            st.subheader("Votre contenu optimis√©")
            st.markdown(f"""
            # {sujet.title()}: Guide Complet et Strat√©gies Efficaces
            
            ## Introduction
            Dans le monde concurrentiel d'aujourd'hui, {sujet} est devenu un √©l√©ment essentiel pour toute entreprise souhaitant d√©velopper sa pr√©sence en ligne. Cet article explore les meilleures pratiques et strat√©gies pour maximiser votre impact dans ce domaine.
            
            ## Pourquoi {sujet.title()} est important
            Les recherches montrent que 82% des consommateurs recherchent des informations en ligne avant d'effectuer un achat. C'est pourquoi ma√Ætriser {sujet} n'est plus une option mais une n√©cessit√© pour rester comp√©titif.
            
            ## Strat√©gies cl√©s pour r√©ussir
            1. **Analyse approfondie de votre audience**
            2. **Cr√©ation de contenu de qualit√©**
            3. **Optimisation pour les moteurs de recherche**
            4. **Engagement sur les r√©seaux sociaux**
            5. **Mesure et ajustement de vos performances**
            
            ## Conclusion
            En int√©grant ces strat√©gies dans votre approche de {sujet}, vous pourrez obtenir des r√©sultats significatifs et durables.
            
            ## Appel √† l'action
            Pr√™t √† transformer votre approche de {sujet}? T√©l√©chargez notre guide gratuit pour approfondir ces strat√©gies!
            """)
            
            # Analyse SEO du contenu g√©n√©r√©
            sample_content = f"Le {sujet} est un √©l√©ment essentiel pour les entreprises modernes. En utilisant les bons {keywords}, vous pouvez am√©liorer significativement vos r√©sultats."
            analysis = analyze_content(sample_content, keywords)
            
            st.markdown("### Analyse SEO du contenu")
            col1, col2, col3 = st.columns(3)
            col1.metric("Score SEO", f"{int(analysis['seo_score'])}/100")
            col2.metric("Nombre de mots", analysis['word_count'])
            col3.metric("Densit√© de mots-cl√©s", f"{analysis['keyword_density']:.1f}%")
            
            st.markdown("### Recommandations d'am√©lioration")
            for rec in analysis['recommendations']:
                st.markdown(f"- {rec}")
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Option pour t√©l√©charger ou partager
            st.download_button(
                label="T√©l√©charger le contenu (Format Word)",
                data=sample_content,
                file_name=f"{sujet.replace(' ', '_')}_content.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )

elif page == "Analyse de mots-cl√©s":
    st.markdown('<h3 class="category-header">Analyse de mots-cl√©s</h3>', unsafe_allow_html=True)
    st.write("Identifiez les mots-cl√©s les plus pertinents pour votre secteur d'activit√©.")
    
    niche = st.text_input("Votre niche ou secteur d'activit√©:", placeholder="Ex: cours de yoga en ligne")
    location = st.text_input("Localisation (optionnel):", placeholder="Ex: Paris, France")
    
    if st.button("Analyser les mots-cl√©s"):
        if not niche:
            st.error("Veuillez sp√©cifier votre niche ou secteur d'activit√©.")
        else:
            with st.spinner("Recherche des meilleurs mots-cl√©s..."):
                time.sleep(2.5)
            
            st.success("Analyse termin√©e!")
            
            # Tableau de r√©sultats simul√©s
            st.markdown('<div class="result-container">', unsafe_allow_html=True)
            st.subheader("Mots-cl√©s recommand√©s")
            
            data = {
                "Mot-cl√©": [
                    f"cours de {niche}", 
                    f"{niche} d√©butant", 
                    f"{niche} en ligne",
                    f"apprendre {niche}",
                    f"tutoriel {niche}",
                    f"formation {niche} certifiante",
                    f"{niche} avanc√©",
                    f"meilleur {niche}"
                ],
                "Volume recherche": [
                    "3,600", "2,900", "4,200", "1,800", "2,100", "1,400", "950", "3,200"
                ],
                "Difficult√©": [
                    "68%", "42%", "57%", "35%", "29%", "61%", "27%", "72%"
                ],
                "CPC": [
                    "1.24‚Ç¨", "0.87‚Ç¨", "1.45‚Ç¨", "0.65‚Ç¨", "0.78‚Ç¨", "1.92‚Ç¨", "0.55‚Ç¨", "1.35‚Ç¨"
                ]
            }
            
            # Ajouter localisation si sp√©cifi√©e
            if location:
                data["Mot-cl√©"].extend([f"{niche} {location}", f"{niche} pr√®s de {location}"])
                data["Volume recherche"].extend(["980", "720"])
                data["Difficult√©"].extend(["32%", "25%"])
                data["CPC"].extend(["1.08‚Ç¨", "0.95‚Ç¨"])
            
            # Afficher le tableau
            st.table(data)
            
            # Graphique de tendance
            st.markdown("### Tendance de recherche")
            st.line_chart({
                "Cours en ligne": [100, 120, 132, 145, 180, 210, 205, 220, 240, 260, 280, 300],
                "Cours pr√©sentiel": [300, 290, 270, 250, 230, 210, 200, 190, 185, 180, 175, 170]
            })
            
            st.markdown("### Recommandations")
            st.markdown("""
            - Concentrez-vous sur les mots-cl√©s √† volume √©lev√© et difficult√© moyenne
            - Cr√©ez du contenu autour de 'cours de {} en ligne' qui montre une tendance croissante
            - Envisagez des mots-cl√©s de longue tra√Æne comme 'comment apprendre {} facilement'
            """.format(niche, niche))
            st.markdown('</div>', unsafe_allow_html=True)

elif page == "Optimisation de titres":
    st.markdown('<h3 class="category-header">Optimisation de titres pour articles et publications</h3>', unsafe_allow_html=True)
    st.write("Cr√©ez des titres accrocheurs qui attirent l'attention et optimis√©s pour le SEO.")
    
    topic = st.text_input("Sujet de votre article:", placeholder="Ex: techniques de m√©ditation")
    main_keyword = st.text_input("Mot-cl√© principal:", placeholder="Ex: m√©ditation pleine conscience")
    
    if st.button("G√©n√©rer des titres optimis√©s"):
        if not topic or not main_keyword:
            st.error("Veuillez remplir tous les champs requis.")
        else:
            titles = generate_titles(topic, main_keyword)
            
            st.success("Titres g√©n√©r√©s avec succ√®s!")
            
            st.markdown('<div class="result-container">', unsafe_allow_html=True)
            st.subheader("Titres optimis√©s sugg√©r√©s")
            
            for i, title in enumerate(titles, 1):
                st.markdown(f"**{i}. {title}**")
                # Afficher un score et une analyse pour chaque titre
                col1, col2, col3 = st.columns(3)
                col1.metric("Score SEO", f"{80 + i}%")
                col2.metric("Score √âmotionnel", f"{70 + i * 2}%")
                col3.metric("CTR Estim√©", f"{4 + i * 0.5:.1f}%")
            
            st.markdown("### Caract√©ristiques d'un titre efficace")
            st.markdown("""
            - **Inclut le mot-cl√© principal** (id√©alement au d√©but)
            - **√âvoque une √©motion** (curiosit√©, urgence, excitation)
            - **Promet une valeur claire** (b√©n√©fice, solution √† un probl√®me)
            - **Longueur optimale** (50-60 caract√®res pour Google)
            - **Utilise des chiffres ou listes** quand c'est pertinent
            """)
            st.markdown('</div>', unsafe_allow_html=True)

elif page == "V√©rificateur de lisibilit√©":
    st.markdown('<h3 class="category-header">V√©rificateur de lisibilit√© et optimisation SEO</h3>', unsafe_allow_html=True)
    st.write("Analysez et am√©liorez votre contenu pour qu'il soit plus lisible et mieux class√©.")
    
    content = st.text_area("Collez votre texte ici:", height=250, placeholder="Entrez le texte que vous souhaitez analyser...")
    keywords_to_check = st.text_input("Mots-cl√©s √† v√©rifier (s√©par√©s par des virgules):", placeholder="Ex: intelligence artificielle, machine learning")
    
    if st.button("Analyser le contenu"):
        if not content:
            st.error("Veuillez entrer du contenu √† analyser.")
        else:
            analysis = analyze_content(content, keywords_to_check)
            
            st.success("Analyse termin√©e!")
            
            st.markdown('<div class="result-container">', unsafe_allow_html=True)
            # Afficher les scores
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("Score SEO", f"{int(analysis['seo_score'])}/100")
            col2.metric("Lisibilit√©", f"{int(analysis['readability_score'])}/100")
            col3.metric("Mots", analysis['word_count'])
            col4.metric("Densit√© mots-cl√©s", f"{analysis['keyword_density']:.1f}%")
            
            # Afficher les recommandations
            st.markdown("### Recommandations d'am√©lioration")
            for rec in analysis['recommendations']:
                st.markdown(f"- {rec}")
            
            # Afficher des statistiques d√©taill√©es
            st.markdown("### Statistiques d√©taill√©es")
            detailed_stats = {
                "Nombre de caract√®res": len(content),
                "Nombre de mots": analysis['word_count'],
                "Nombre de phrases": len(re.split(r'[.!?]', content)) - 1,
                "Temps de lecture estim√©": f"{max(1, round(analysis['word_count'] / 200))} minute(s)",
                "Niveau de lecture": "Interm√©diaire",
                "Mots-cl√©s manquants": "Aucun" if analysis['keyword_density'] > 1 else "Int√©grez plus de mots-cl√©s principaux"
            }
            
            for key, value in detailed_stats.items():
                st.markdown(f"**{key}:** {value}")
            
            # Afficher un texte optimis√© sugg√©r√©
            st.markdown("### Version optimis√©e sugg√©r√©e")
            st.markdown(f"*Une version optimis√©e de votre texte sera disponible avec l'abonnement Pro.*")
            
            if selected_plan == "Gratuit (3 analyses/jour)":
                st.info("Passez √† l'abonnement Pro pour acc√©der √† toutes les fonctionnalit√©s d'optimisation.")
            st.markdown('</div>', unsafe_allow_html=True)

# Section de conversion (footer de l'application)
st.markdown("---")
st.markdown("## Commencez √† mon√©tiser votre contenu d√®s aujourd'hui!")

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    Rejoignez plus de 5,000 cr√©ateurs de contenu qui utilisent ContentOptimizer AI pour:
    - G√©n√©rer du contenu optimis√© qui se classe mieux dans les r√©sultats de recherche
    - Attirer plus de visiteurs sur leur site web ou blog
    - Augmenter leurs revenus publicitaires et d'affiliation
    - Gagner du temps dans leur processus de cr√©ation de contenu
    """)

with col2:
    st.markdown('<div style="background-color:#f0f7ff; padding:15px; border-radius:10px; text-align:center;">', unsafe_allow_html=True)
    st.markdown("### Essayez le Plan Pro")
    st.markdown("**19.99‚Ç¨/mois**")
    st.markdown("‚úÖ Analyses illimit√©es")
    st.markdown("‚úÖ Optimisation avanc√©e")
    st.markdown("‚úÖ Priorit√© aux nouvelles fonctionnalit√©s")
    st.button("Passer √† l'abonnement Pro", key="upgrade_button")
    st.markdown('</div>', unsafe_allow_html=True)

# Afficher l'heure actuelle simul√©e
st.markdown(f"<div style='text-align:center; color:gray; font-size:0.8rem;'>Derni√®re mise √† jour: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</div>", unsafe_allow_html=True)
